{"ast":null,"code":"var _jsxFileName = \"/Users/yuradvornichenko/VSCode/omdbapiReact/src/components/movies/Movies.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n// import { toast } from 'react-toastify';\n// // import { nanoid } from 'nanoid';\n\nimport { useAppDispatch, useAppSelector } from '../../redux/hook';\nimport { operations } from '../../redux/movies';\n// import { getMoviesSearch } from '../../API/APImovies';\n// import { Loader, MoviesItem, NotFound, ScrollToTop } from '../';\nimport styles from './Movies.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Movies = () => {\n  _s();\n  //  const [moviesSearch, setMoviesSearch] = useState<any[]>([]);\n  //  const [page, setPage] = useState<number>(1);\n  //  const [endFix, setEndFix] = useState<boolean>(true);\n  const isLoader = useAppSelector();\n  //  const { query } = useParams();\n  const dispatch = useAppDispatch();\n  //  const prevQuery = useRef<string | null | undefined>(null);\n  //  const pageReff = useRef<number | null | undefined>(null);\n\n  useEffect(() => {\n    dispatch(operations.fetchMovies(1));\n  }, [dispatch]);\n\n  // useEffect(() => {\n  //   // async function fetchFilms() {\n  //   //   try {\n  //   //     // const results = await getMoviesSearch(query!, page);\n\n  //   //     if (results.length < 20) {\n  //   //       setEndFix(false);\n  //   //     }\n\n  //   //     if (results.length > 0) {\n  //   //       setMoviesSearch((prevState) => [...prevState, ...results]);\n  //   //       setLoading(false);\n  //   //     }\n\n  //   //     if (results.length === 0) {\n  //   //       toast.error('Not found');\n  //   //       setLoading(true);\n  //   //     }\n  //   //   } catch (error) {\n  //   //     console.log(error);\n  //   //   }\n  //   // }\n\n  //   // if (pageReff.current === page && prevQuery.current === query) {\n  //   //   return;\n  //   // }\n\n  //   // if (prevQuery.current !== query) {\n  //   //   setMoviesSearch([]);\n  //   //   setPage(1);\n  //   //   setEndFix(true);\n  //   // }\n\n  //   // if (prevQuery.current !== query && page === 1) {\n  //   //   pageReff.current = null;\n  //   // }\n\n  //   if (query && pageReff.current !== page) {\n  //     fetchFilms();\n  //   }\n\n  //   prevQuery.current = query;\n  //   pageReff.current = page;\n  // }, [query, page]);\n\n  // const showNextMovies = () => {\n  //   if (moviesSearch.length !== 0) {\n  //     setPage(page + 1);\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [!loading && /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: moviesSearch.length,\n      next: showNextMovies,\n      hasMore: endFix,\n      scrollThreshold: 1,\n      loader: /*#__PURE__*/_jsxDEV(Loader, {\n        size: 70\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: styles.list,\n        children: moviesSearch.map(item => /*#__PURE__*/_jsxDEV(MoviesItem, {\n          data: item,\n          genres: genres\n        }, `${item.id}_${nanoid()}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(ScrollToTop, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(Movies, \"fLEYnhhUcIK3bFk+YmpyV65MCdU=\", false, function () {\n  return [useAppSelector, useAppDispatch];\n});\n_c = Movies;\nexport default Movies;\nvar _c;\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"names":["useEffect","InfiniteScroll","useAppDispatch","useAppSelector","operations","styles","jsxDEV","_jsxDEV","Movies","_s","isLoader","dispatch","fetchMovies","className","container","children","loading","dataLength","moviesSearch","length","next","showNextMovies","hasMore","endFix","scrollThreshold","loader","Loader","size","fileName","_jsxFileName","lineNumber","columnNumber","list","map","item","MoviesItem","data","genres","id","nanoid","NotFound","ScrollToTop","_c","$RefreshReg$"],"sources":["/Users/yuradvornichenko/VSCode/omdbapiReact/src/components/movies/Movies.tsx"],"sourcesContent":["import { useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n// import { toast } from 'react-toastify';\n// // import { nanoid } from 'nanoid';\n\nimport { useAppDispatch, useAppSelector } from '../../redux/hook';\nimport { operations } from '../../redux/movies';\n// import { getMoviesSearch } from '../../API/APImovies';\n// import { Loader, MoviesItem, NotFound, ScrollToTop } from '../';\nimport styles from './Movies.module.scss';\n\nconst Movies: React.FC = () => {\n  //  const [moviesSearch, setMoviesSearch] = useState<any[]>([]);\n  //  const [page, setPage] = useState<number>(1);\n  //  const [endFix, setEndFix] = useState<boolean>(true);\n  const isLoader = useAppSelector();\n  //  const { query } = useParams();\n  const dispatch = useAppDispatch();\n  //  const prevQuery = useRef<string | null | undefined>(null);\n  //  const pageReff = useRef<number | null | undefined>(null);\n\n  useEffect(() => {\n    dispatch(operations.fetchMovies(1));\n  }, [dispatch]);\n\n  // useEffect(() => {\n  //   // async function fetchFilms() {\n  //   //   try {\n  //   //     // const results = await getMoviesSearch(query!, page);\n\n  //   //     if (results.length < 20) {\n  //   //       setEndFix(false);\n  //   //     }\n\n  //   //     if (results.length > 0) {\n  //   //       setMoviesSearch((prevState) => [...prevState, ...results]);\n  //   //       setLoading(false);\n  //   //     }\n\n  //   //     if (results.length === 0) {\n  //   //       toast.error('Not found');\n  //   //       setLoading(true);\n  //   //     }\n  //   //   } catch (error) {\n  //   //     console.log(error);\n  //   //   }\n  //   // }\n\n  //   // if (pageReff.current === page && prevQuery.current === query) {\n  //   //   return;\n  //   // }\n\n  //   // if (prevQuery.current !== query) {\n  //   //   setMoviesSearch([]);\n  //   //   setPage(1);\n  //   //   setEndFix(true);\n  //   // }\n\n  //   // if (prevQuery.current !== query && page === 1) {\n  //   //   pageReff.current = null;\n  //   // }\n\n  //   if (query && pageReff.current !== page) {\n  //     fetchFilms();\n  //   }\n\n  //   prevQuery.current = query;\n  //   pageReff.current = page;\n  // }, [query, page]);\n\n  // const showNextMovies = () => {\n  //   if (moviesSearch.length !== 0) {\n  //     setPage(page + 1);\n  //   }\n  // };\n\n  return (\n    <div className={styles.container}>\n      {!loading && (\n        <InfiniteScroll\n          dataLength={moviesSearch.length}\n          next={showNextMovies}\n          hasMore={endFix}\n          scrollThreshold={1}\n          loader={<Loader size={70} />}\n        >\n          <ul className={styles.list}>\n            {moviesSearch.map((item) => (\n              <MoviesItem\n                key={`${item.id}_${nanoid()}`}\n                data={item}\n                genres={genres}\n              />\n            ))}\n          </ul>\n        </InfiniteScroll>\n      )}\n      {loading && <NotFound />}\n      <ScrollToTop />\n    </div>\n  );\n};\n\nexport default Movies;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA,OAAOC,cAAc,MAAM,iCAAiC;AAC5D;AACA;;AAEA,SAASC,cAAc,EAAEC,cAAc,QAAQ,kBAAkB;AACjE,SAASC,UAAU,QAAQ,oBAAoB;AAC/C;AACA;AACA,OAAOC,MAAM,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,MAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B;EACA;EACA;EACA,MAAMC,QAAQ,GAAGP,cAAc,EAAE;EACjC;EACA,MAAMQ,QAAQ,GAAGT,cAAc,EAAE;EACjC;EACA;;EAEAF,SAAS,CAAC,MAAM;IACdW,QAAQ,CAACP,UAAU,CAACQ,WAAW,CAAC,CAAC,CAAC,CAAC;EACrC,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC;;EAEd;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,oBACEJ,OAAA;IAAKM,SAAS,EAAER,MAAM,CAACS,SAAU;IAAAC,QAAA,GAC9B,CAACC,OAAO,iBACPT,OAAA,CAACN,cAAc;MACbgB,UAAU,EAAEC,YAAY,CAACC,MAAO;MAChCC,IAAI,EAAEC,cAAe;MACrBC,OAAO,EAAEC,MAAO;MAChBC,eAAe,EAAE,CAAE;MACnBC,MAAM,eAAElB,OAAA,CAACmB,MAAM;QAACC,IAAI,EAAE;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI;MAAAhB,QAAA,eAE7BR,OAAA;QAAIM,SAAS,EAAER,MAAM,CAAC2B,IAAK;QAAAjB,QAAA,EACxBG,YAAY,CAACe,GAAG,CAAEC,IAAI,iBACrB3B,OAAA,CAAC4B,UAAU;UAETC,IAAI,EAAEF,IAAK;UACXG,MAAM,EAAEA;QAAO,GAFT,GAAEH,IAAI,CAACI,EAAG,IAAGC,MAAM,EAAG,EAAC;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAIhC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAER,EACAf,OAAO,iBAAIT,OAAA,CAACiC,QAAQ;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACxBxB,OAAA,CAACkC,WAAW;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACX;AAEV,CAAC;AAACtB,EAAA,CA1FID,MAAgB;EAAA,QAIHL,cAAc,EAEdD,cAAc;AAAA;AAAAwC,EAAA,GAN3BlC,MAAgB;AA4FtB,eAAeA,MAAM;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}