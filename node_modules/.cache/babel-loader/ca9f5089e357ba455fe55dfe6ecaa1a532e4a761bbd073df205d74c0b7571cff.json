{"ast":null,"code":"var _jsxFileName = \"/Users/yuradvornichenko/VSCode/omdbapiReact/src/components/movies/Movies.tsx\";\n// import { useState, useEffect, useRef } from 'react';\n// import { useParams } from 'react-router-dom';\n// // import InfiniteScroll from 'react-infinite-scroll-component';\n// import { toast } from 'react-toastify';\n// // import { nanoid } from 'nanoid';\n\n// import { useAppSelector, useAppDispatch } from '../../redux/hook';\n// import { operations, selectors } from '../../redux/movies';\n// import { getMoviesSearch } from '../../API/APImovies';\n// import { Loader, MoviesItem, NotFound, ScrollToTop } from '../';\nimport styles from './Movies.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Movies = () => {\n  //  const [moviesSearch, setMoviesSearch] = useState<any[]>([]);\n  //  const [page, setPage] = useState<number>(1);\n  //  const [endFix, setEndFix] = useState<boolean>(true);\n  //  const [loading, setLoading] = useState<boolean>(false);\n  //  const { query } = useParams();\n  // const dispatch = useAppDispatch();\n  //  const prevQuery = useRef<string | null | undefined>(null);\n  //  const pageReff = useRef<number | null | undefined>(null);\n\n  // useEffect(() => {\n  //   dispatch(operations.fetchMovies(1));\n  // }, [dispatch]);\n\n  // useEffect(() => {\n  //   // async function fetchFilms() {\n  //   //   try {\n  //   //     // const results = await getMoviesSearch(query!, page);\n\n  //   //     if (results.length < 20) {\n  //   //       setEndFix(false);\n  //   //     }\n\n  //   //     if (results.length > 0) {\n  //   //       setMoviesSearch((prevState) => [...prevState, ...results]);\n  //   //       setLoading(false);\n  //   //     }\n\n  //   //     if (results.length === 0) {\n  //   //       toast.error('Not found');\n  //   //       setLoading(true);\n  //   //     }\n  //   //   } catch (error) {\n  //   //     console.log(error);\n  //   //   }\n  //   // }\n\n  //   // if (pageReff.current === page && prevQuery.current === query) {\n  //   //   return;\n  //   // }\n\n  //   // if (prevQuery.current !== query) {\n  //   //   setMoviesSearch([]);\n  //   //   setPage(1);\n  //   //   setEndFix(true);\n  //   // }\n\n  //   // if (prevQuery.current !== query && page === 1) {\n  //   //   pageReff.current = null;\n  //   // }\n\n  //   if (query && pageReff.current !== page) {\n  //     fetchFilms();\n  //   }\n\n  //   prevQuery.current = query;\n  //   pageReff.current = page;\n  // }, [query, page]);\n\n  // const showNextMovies = () => {\n  //   if (moviesSearch.length !== 0) {\n  //     setPage(page + 1);\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_c = Movies;\nexport default Movies;\nvar _c;\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"names":["styles","jsxDEV","_jsxDEV","Movies","className","container","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yuradvornichenko/VSCode/omdbapiReact/src/components/movies/Movies.tsx"],"sourcesContent":["// import { useState, useEffect, useRef } from 'react';\n// import { useParams } from 'react-router-dom';\n// // import InfiniteScroll from 'react-infinite-scroll-component';\n// import { toast } from 'react-toastify';\n// // import { nanoid } from 'nanoid';\n\n// import { useAppSelector, useAppDispatch } from '../../redux/hook';\n// import { operations, selectors } from '../../redux/movies';\n// import { getMoviesSearch } from '../../API/APImovies';\n// import { Loader, MoviesItem, NotFound, ScrollToTop } from '../';\nimport styles from './Movies.module.scss';\n\nconst Movies: React.FC = () => {\n  //  const [moviesSearch, setMoviesSearch] = useState<any[]>([]);\n  //  const [page, setPage] = useState<number>(1);\n  //  const [endFix, setEndFix] = useState<boolean>(true);\n  //  const [loading, setLoading] = useState<boolean>(false);\n  //  const { query } = useParams();\n  // const dispatch = useAppDispatch();\n  //  const prevQuery = useRef<string | null | undefined>(null);\n  //  const pageReff = useRef<number | null | undefined>(null);\n\n  // useEffect(() => {\n  //   dispatch(operations.fetchMovies(1));\n  // }, [dispatch]);\n\n  // useEffect(() => {\n  //   // async function fetchFilms() {\n  //   //   try {\n  //   //     // const results = await getMoviesSearch(query!, page);\n\n  //   //     if (results.length < 20) {\n  //   //       setEndFix(false);\n  //   //     }\n\n  //   //     if (results.length > 0) {\n  //   //       setMoviesSearch((prevState) => [...prevState, ...results]);\n  //   //       setLoading(false);\n  //   //     }\n\n  //   //     if (results.length === 0) {\n  //   //       toast.error('Not found');\n  //   //       setLoading(true);\n  //   //     }\n  //   //   } catch (error) {\n  //   //     console.log(error);\n  //   //   }\n  //   // }\n\n  //   // if (pageReff.current === page && prevQuery.current === query) {\n  //   //   return;\n  //   // }\n\n  //   // if (prevQuery.current !== query) {\n  //   //   setMoviesSearch([]);\n  //   //   setPage(1);\n  //   //   setEndFix(true);\n  //   // }\n\n  //   // if (prevQuery.current !== query && page === 1) {\n  //   //   pageReff.current = null;\n  //   // }\n\n  //   if (query && pageReff.current !== page) {\n  //     fetchFilms();\n  //   }\n\n  //   prevQuery.current = query;\n  //   pageReff.current = page;\n  // }, [query, page]);\n\n  // const showNextMovies = () => {\n  //   if (moviesSearch.length !== 0) {\n  //     setPage(page + 1);\n  //   }\n  // };\n\n  return (\n    <div className={styles.container}>\n      {/* {!loading && (\n        <InfiniteScroll\n          dataLength={moviesSearch.length}\n          next={showNextMovies}\n          hasMore={endFix}\n          scrollThreshold={1}\n          loader={<Loader size={70} />}\n        >\n          <ul className={styles.list}>\n            {moviesSearch.map((item) => (\n              <MoviesItem\n                key={`${item.id}_${nanoid()}`}\n                data={item}\n                genres={genres}\n              />\n            ))}\n          </ul>\n        </InfiniteScroll>\n      )}\n      {loading && <NotFound />}\n      <ScrollToTop /> */}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,MAAgB,GAAGA,CAAA,KAAM;EAC7B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,oBACED,OAAA;IAAKE,SAAS,EAAEJ,MAAM,CAACK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAsB3B;AAEV,CAAC;AAACC,EAAA,GA1FIP,MAAgB;AA4FtB,eAAeA,MAAM;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}