{"ast":null,"code":"import axios from 'axios';\nexport const BASEURL = 'http://www.omdbapi.com/';\n// export const IMAGEURL = 'https://image.tmdb.org/t/p/w780/';\nconst API_KEY = '?apikey=7e8c7aae';\nexport const movies = axios.create({\n  baseURL: `${BASEURL}`\n});\nasync function getMoviesSearchRequest(data) {\n  const {\n    currentSearch,\n    page\n  } = data;\n  try {\n    let response = await movies.get(`/${API_KEY}&s=${currentSearch}&type=movie&page=${page}`);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    if (axios.isCancel(error)) {\n      return Promise.reject();\n    } else {\n      console.log('Error', error);\n      return;\n    }\n  }\n}\nasync function getMovie(id) {\n  try {\n    let response = await movies.get(`/${API_KEY}&i=${id}`);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    if (axios.isCancel(error)) {\n      return Promise.reject();\n    } else {\n      console.log('Error', error);\n      return;\n    }\n  }\n}\nexport { getMoviesSearchRequest, getMovie };","map":{"version":3,"names":["axios","BASEURL","API_KEY","movies","create","baseURL","getMoviesSearchRequest","data","currentSearch","page","response","get","error","console","log","isCancel","Promise","reject","getMovie","id"],"sources":["/Users/yuradvornichenko/VSCode/omdbapiReact/src/API/APImovies.ts"],"sourcesContent":["import axios from 'axios';\n\nimport { moviesTypes } from '../types';\n\nexport const BASEURL = 'http://www.omdbapi.com/';\n// export const IMAGEURL = 'https://image.tmdb.org/t/p/w780/';\nconst API_KEY = '?apikey=7e8c7aae';\n\nexport const movies = axios.create({\n  baseURL: `${BASEURL}`,\n});\n\nasync function getMoviesSearchRequest(data: {\n  currentSearch: string | null;\n  page: number;\n}): Promise<moviesTypes.Movies | undefined> {\n  const { currentSearch, page } = data;\n  try {\n    let response = await movies.get(\n      `/${API_KEY}&s=${currentSearch}&type=movie&page=${page}`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    if (axios.isCancel(error)) {\n      return Promise.reject();\n    } else {\n      console.log('Error', error);\n      return;\n    }\n  }\n}\n\nasync function getMovie(\n  id: string\n): Promise<moviesTypes.OneMovieType | undefined> {\n  try {\n    let response = await movies.get(`/${API_KEY}&i=${id}`);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    if (axios.isCancel(error)) {\n      return Promise.reject();\n    } else {\n      console.log('Error', error);\n      return;\n    }\n  }\n}\n\nexport { getMoviesSearchRequest, getMovie };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAIzB,OAAO,MAAMC,OAAO,GAAG,yBAAyB;AAChD;AACA,MAAMC,OAAO,GAAG,kBAAkB;AAElC,OAAO,MAAMC,MAAM,GAAGH,KAAK,CAACI,MAAM,CAAC;EACjCC,OAAO,EAAG,GAAEJ,OAAQ;AACtB,CAAC,CAAC;AAEF,eAAeK,sBAAsBA,CAACC,IAGrC,EAA2C;EAC1C,MAAM;IAAEC,aAAa;IAAEC;EAAK,CAAC,GAAGF,IAAI;EACpC,IAAI;IACF,IAAIG,QAAQ,GAAG,MAAMP,MAAM,CAACQ,GAAG,CAC5B,IAAGT,OAAQ,MAAKM,aAAc,oBAAmBC,IAAK,EAAC,CACzD;IACD,OAAOC,QAAQ,CAACH,IAAI;EACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,IAAIZ,KAAK,CAACe,QAAQ,CAACH,KAAK,CAAC,EAAE;MACzB,OAAOI,OAAO,CAACC,MAAM,EAAE;IACzB,CAAC,MAAM;MACLJ,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAAC;MAC3B;IACF;EACF;AACF;AAEA,eAAeM,QAAQA,CACrBC,EAAU,EACqC;EAC/C,IAAI;IACF,IAAIT,QAAQ,GAAG,MAAMP,MAAM,CAACQ,GAAG,CAAE,IAAGT,OAAQ,MAAKiB,EAAG,EAAC,CAAC;IACtD,OAAOT,QAAQ,CAACH,IAAI;EACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,IAAIZ,KAAK,CAACe,QAAQ,CAACH,KAAK,CAAC,EAAE;MACzB,OAAOI,OAAO,CAACC,MAAM,EAAE;IACzB,CAAC,MAAM;MACLJ,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAAC;MAC3B;IACF;EACF;AACF;AAEA,SAASN,sBAAsB,EAAEY,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}