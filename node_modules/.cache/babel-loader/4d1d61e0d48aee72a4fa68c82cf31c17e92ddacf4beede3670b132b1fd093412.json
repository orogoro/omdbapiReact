{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { getMoviesSearchRequest } from '../../API/APImovies';\n\n// import { moviesTypes } from '../../types';\n\nconst fetchMovies = createAsyncThunk('movies/fetchMovies', async (data, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  try {\n    const response = await getMoviesSearchRequest(data);\n    if (!response) {\n      toast.error('Movie not found!');\n    }\n    console.log(response);\n    return response;\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n});\n\n// const fetchOneMovie = createAsyncThunk<\n//   moviesTypes.OneMovieType,\n//   string,\n//   { rejectValue: any }\n// >('movies/fetchOneMovie', async (id, { rejectWithValue }: any) => {\n//   try {\n//     const response = await getMovie(id);\n//     return response;\n//   } catch (error) {\n//     return rejectWithValue(error);\n//   }\n// });\n\nexport { fetchMovies\n// fetchOneMovie,\n};","map":{"version":3,"names":["createAsyncThunk","getMoviesSearchRequest","fetchMovies","data","_ref","rejectWithValue","response","toast","error","console","log"],"sources":["/Users/yuradvornichenko/VSCode/omdbapiReact/src/redux/movies/operations.ts"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { getMoviesSearchRequest } from '../../API/APImovies';\n\n// import { moviesTypes } from '../../types';\n\nconst fetchMovies = createAsyncThunk<\n  any,\n  { currentSearch: string | null; page: number },\n  { rejectValue: any }\n>('movies/fetchMovies', async (data, { rejectWithValue }: any) => {\n  try {\n    const response = await getMoviesSearchRequest(data);\n    if (!response) {\n      toast.error('Movie not found!');\n    }\n    console.log(response);\n    return response;\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n});\n\n// const fetchOneMovie = createAsyncThunk<\n//   moviesTypes.OneMovieType,\n//   string,\n//   { rejectValue: any }\n// >('movies/fetchOneMovie', async (id, { rejectWithValue }: any) => {\n//   try {\n//     const response = await getMovie(id);\n//     return response;\n//   } catch (error) {\n//     return rejectWithValue(error);\n//   }\n// });\n\nexport {\n  fetchMovies,\n  // fetchOneMovie,\n};\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,sBAAsB,QAAQ,qBAAqB;;AAE5D;;AAEA,MAAMC,WAAW,GAAGF,gBAAgB,CAIlC,oBAAoB,EAAE,OAAOG,IAAI,EAAAC,IAAA,KAA+B;EAAA,IAA7B;IAAEC;EAAqB,CAAC,GAAAD,IAAA;EAC3D,IAAI;IACF,MAAME,QAAQ,GAAG,MAAML,sBAAsB,CAACE,IAAI,CAAC;IACnD,IAAI,CAACG,QAAQ,EAAE;MACbC,KAAK,CAACC,KAAK,CAAC,kBAAkB,CAAC;IACjC;IACAC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;IACrB,OAAOA,QAAQ;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOH,eAAe,CAACG,KAAK,CAAC;EAC/B;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACEN;AACA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}