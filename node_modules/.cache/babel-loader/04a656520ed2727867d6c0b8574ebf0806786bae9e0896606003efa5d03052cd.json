{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { toast } from 'react-toastify';\nimport { getMoviesSearchRequest, getMovie } from '../../API/APImovies';\nconst fetchMovies = createAsyncThunk('movies/fetchMovies', async (data, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  try {\n    const response = await getMoviesSearchRequest(data);\n    if (response !== null && response !== void 0 && response.Error) {\n      toast.error(response === null || response === void 0 ? void 0 : response.Error);\n      return;\n    }\n    return response;\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n});\nconst fetchOneMovie = createAsyncThunk('movies/fetchOneMovie', async (id, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n  try {\n    const response = await getMovie(id);\n    return response;\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n});\nexport { fetchMovies, fetchOneMovie };","map":{"version":3,"names":["createAsyncThunk","toast","getMoviesSearchRequest","getMovie","fetchMovies","data","_ref","rejectWithValue","response","Error","error","fetchOneMovie","id","_ref2"],"sources":["/Users/yuradvornichenko/VSCode/omdbapiReact/src/redux/movies/operations.ts"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { toast } from 'react-toastify';\n\nimport { getMoviesSearchRequest, getMovie } from '../../API/APImovies';\n\nimport { moviesTypes } from '../../types';\n\nconst fetchMovies = createAsyncThunk<\n  moviesTypes.Movies,\n  { currentSearch: string | null; page: number },\n  { rejectValue: any }\n>('movies/fetchMovies', async (data, { rejectWithValue }: any) => {\n  try {\n    const response = await getMoviesSearchRequest(data);\n\n    if (response?.Error) {\n      toast.error(response?.Error);\n      return;\n    }\n\n    return response;\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n});\n\nconst fetchOneMovie = createAsyncThunk<any, string, { rejectValue: any }>(\n  'movies/fetchOneMovie',\n  async (id, { rejectWithValue }: any) => {\n    try {\n      const response = await getMovie(id);\n      return response;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport { fetchMovies, fetchOneMovie };\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,SAASC,sBAAsB,EAAEC,QAAQ,QAAQ,qBAAqB;AAItE,MAAMC,WAAW,GAAGJ,gBAAgB,CAIlC,oBAAoB,EAAE,OAAOK,IAAI,EAAAC,IAAA,KAA+B;EAAA,IAA7B;IAAEC;EAAqB,CAAC,GAAAD,IAAA;EAC3D,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMN,sBAAsB,CAACG,IAAI,CAAC;IAEnD,IAAIG,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEC,KAAK,EAAE;MACnBR,KAAK,CAACS,KAAK,CAACF,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC,KAAK,CAAC;MAC5B;IACF;IAEA,OAAOD,QAAQ;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOH,eAAe,CAACG,KAAK,CAAC;EAC/B;AACF,CAAC,CAAC;AAEF,MAAMC,aAAa,GAAGX,gBAAgB,CACpC,sBAAsB,EACtB,OAAOY,EAAE,EAAAC,KAAA,KAA+B;EAAA,IAA7B;IAAEN;EAAqB,CAAC,GAAAM,KAAA;EACjC,IAAI;IACF,MAAML,QAAQ,GAAG,MAAML,QAAQ,CAACS,EAAE,CAAC;IACnC,OAAOJ,QAAQ;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOH,eAAe,CAACG,KAAK,CAAC;EAC/B;AACF,CAAC,CACF;AAED,SAASN,WAAW,EAAEO,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}