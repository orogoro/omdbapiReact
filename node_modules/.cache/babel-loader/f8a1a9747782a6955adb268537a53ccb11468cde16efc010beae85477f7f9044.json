{"ast":null,"code":"var _jsxFileName = \"/Users/yuradvornichenko/VSCode/omdbapiReact/src/components/movies/Movies.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { toast } from 'react-toastify';\n// // import { nanoid } from 'nanoid';\n\nimport { useAppDispatch, useAppSelector } from '../../redux/hook';\nimport { operations, selectors, action } from '../../redux/movies';\nimport { Loader, NotFound, ScrollToTop } from '../';\nimport styles from './Movies.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Movies = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const currentSearch = searchParams.get('query');\n  const [page, setPage] = useState(1);\n  const [endFix, setEndFix] = useState(true);\n  const isLoader = useAppSelector(selectors.isLoader);\n  const totalResults = useAppSelector(selectors.getMoviesTotalResults);\n  const movies = useAppSelector(selectors.getMovies);\n  const dispatch = useAppDispatch();\n  const prevQuery = useRef(null);\n  const pageReff = useRef(null);\n  console.log(pageReff);\n  useEffect(() => {\n    if (pageReff.current === page) {\n      return;\n    }\n    pageReff.current = page;\n    if (movies.length === totalResults) {\n      setEndFix(false);\n    }\n    if (movies.length === 0 && pageReff.current !== null) {\n      console.log('wefwef');\n      toast.error('Not found');\n      return;\n    }\n    if (prevQuery.current !== currentSearch) {\n      dispatch(action.moviesAction([]));\n      setPage(1);\n      setEndFix(true);\n    }\n    dispatch(operations.fetchMovies({\n      currentSearch,\n      page\n    }));\n  }, [dispatch, currentSearch, page, movies, totalResults]);\n\n  // useEffect(() => {\n  //   // async function fetchFilms() {\n  //   //   try {\n  //   //     // const results = await getMoviesSearch(query!, page);\n\n  //   //     if (results.length < 20) {\n  //   //       setEndFix(false);\n  //   //     }\n\n  //   //     if (results.length > 0) {\n  //   //       setMoviesSearch((prevState) => [...prevState, ...results]);\n  //   //       setLoading(false);\n  //   //     }\n\n  //   //     if (results.length === 0) {\n  //   //       toast.error('Not found');\n  //   //       setLoading(true);\n  //   //     }\n  //   //   } catch (error) {\n  //   //     console.log(error);\n  //   //   }\n  //   // }\n\n  //   // if (pageReff.current === page && prevQuery.current === query) {\n  //   //   return;\n  //   // }\n\n  //   // if (prevQuery.current !== query) {\n  //   //   setMoviesSearch([]);\n  //   //   setPage(1);\n  //   //   setEndFix(true);\n  //   // }\n\n  //   // if (prevQuery.current !== query && page === 1) {\n  //   //   pageReff.current = null;\n  //   // }\n\n  //   if (query && pageReff.current !== page) {\n  //     fetchFilms();\n  //   }\n\n  //   prevQuery.current = query;\n  //   pageReff.current = page;\n  // }, [query, page]);\n\n  const showNextMovies = () => {\n    if (movies.length !== 0) {\n      setPage(page + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [!isLoader && /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: movies.length,\n      next: showNextMovies,\n      hasMore: endFix,\n      scrollThreshold: 1,\n      loader: /*#__PURE__*/_jsxDEV(Loader, {\n        size: 70\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), isLoader && /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(ScrollToTop, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(Movies, \"hwBFjpByFNp0rnST/ltcguUuD3k=\", false, function () {\n  return [useSearchParams, useAppSelector, useAppSelector, useAppSelector, useAppDispatch];\n});\n_c = Movies;\nexport default Movies;\nvar _c;\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"names":["useEffect","useState","useRef","useSearchParams","InfiniteScroll","toast","useAppDispatch","useAppSelector","operations","selectors","action","Loader","NotFound","ScrollToTop","styles","jsxDEV","_jsxDEV","Movies","_s","searchParams","currentSearch","get","page","setPage","endFix","setEndFix","isLoader","totalResults","getMoviesTotalResults","movies","getMovies","dispatch","prevQuery","pageReff","console","log","current","length","error","moviesAction","fetchMovies","showNextMovies","className","container","children","dataLength","next","hasMore","scrollThreshold","loader","size","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yuradvornichenko/VSCode/omdbapiReact/src/components/movies/Movies.tsx"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { toast } from 'react-toastify';\n// // import { nanoid } from 'nanoid';\n\nimport { useAppDispatch, useAppSelector } from '../../redux/hook';\nimport { operations, selectors, action } from '../../redux/movies';\n\nimport { Loader, NotFound, ScrollToTop } from '../';\nimport styles from './Movies.module.scss';\n\nconst Movies: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const currentSearch = searchParams.get('query');\n  const [page, setPage] = useState<number>(1);\n  const [endFix, setEndFix] = useState<boolean>(true);\n  const isLoader = useAppSelector(selectors.isLoader);\n  const totalResults = useAppSelector(selectors.getMoviesTotalResults);\n  const movies = useAppSelector(selectors.getMovies);\n  const dispatch = useAppDispatch();\n  const prevQuery = useRef<string | null | undefined>(null);\n  const pageReff = useRef<number | null | undefined>(null);\n  console.log(pageReff);\n\n  useEffect(() => {\n    if (pageReff.current === page) {\n      return;\n    }\n    pageReff.current = page;\n\n    if (movies.length === totalResults) {\n      setEndFix(false);\n    }\n\n    if (movies.length === 0 && pageReff.current !== null) {\n      console.log('wefwef');\n      toast.error('Not found');\n      return;\n    }\n\n    if (prevQuery.current !== currentSearch) {\n      dispatch(action.moviesAction([]));\n      setPage(1);\n      setEndFix(true);\n    }\n\n    dispatch(operations.fetchMovies({ currentSearch, page }));\n  }, [dispatch, currentSearch, page, movies, totalResults]);\n\n  // useEffect(() => {\n  //   // async function fetchFilms() {\n  //   //   try {\n  //   //     // const results = await getMoviesSearch(query!, page);\n\n  //   //     if (results.length < 20) {\n  //   //       setEndFix(false);\n  //   //     }\n\n  //   //     if (results.length > 0) {\n  //   //       setMoviesSearch((prevState) => [...prevState, ...results]);\n  //   //       setLoading(false);\n  //   //     }\n\n  //   //     if (results.length === 0) {\n  //   //       toast.error('Not found');\n  //   //       setLoading(true);\n  //   //     }\n  //   //   } catch (error) {\n  //   //     console.log(error);\n  //   //   }\n  //   // }\n\n  //   // if (pageReff.current === page && prevQuery.current === query) {\n  //   //   return;\n  //   // }\n\n  //   // if (prevQuery.current !== query) {\n  //   //   setMoviesSearch([]);\n  //   //   setPage(1);\n  //   //   setEndFix(true);\n  //   // }\n\n  //   // if (prevQuery.current !== query && page === 1) {\n  //   //   pageReff.current = null;\n  //   // }\n\n  //   if (query && pageReff.current !== page) {\n  //     fetchFilms();\n  //   }\n\n  //   prevQuery.current = query;\n  //   pageReff.current = page;\n  // }, [query, page]);\n\n  const showNextMovies = () => {\n    if (movies.length !== 0) {\n      setPage(page + 1);\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      {!isLoader && (\n        <InfiniteScroll\n          dataLength={movies.length}\n          next={showNextMovies}\n          hasMore={endFix}\n          scrollThreshold={1}\n          loader={<Loader size={70} />}\n        >\n          {/* <ul className={styles.list}>\n            {moviesSearch.map((item) => (\n              <MoviesItem\n                key={`${item.id}_${nanoid()}`}\n                data={item}\n                genres={genres}\n              />\n            ))}\n          </ul> */}\n        </InfiniteScroll>\n      )}\n      {isLoader && <NotFound />}\n      <ScrollToTop />\n    </div>\n  );\n};\n\nexport default Movies;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}